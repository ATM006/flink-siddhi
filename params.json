{
  "name": "flink-siddhi",
  "tagline": "A light-weight library to run Siddhi CEP within Apache Flink streaming application.",
  "body": "flink-siddhi\r\n============\r\n\r\n> A light-weight library to run [Siddhi CEP](https://github.com/wso2/siddhi) within [Apache Flink](https://github.com/apache/flink) streaming application.\r\n\r\n__Version:`1.2-SNAPSHOT`__\r\n\r\n## About\r\n\r\nSiddhi CEP is a lightweight and easy-to-use Open Source Complex Event Processing Engine (CEP) released as a Java Library under `Apache Software License v2.0`. \r\nSiddhi CEP processes events which are generated by various event sources, analyses them and notifies appropriate complex events according to the user specified queries. \r\n\r\nThis project is mainly to provide a light-weight library to easily run Siddhi CEP within flink streaming application.\r\n\r\n## Usage and API\r\n\r\n* Add `flink-siddhi` in maven dependency:\r\n\r\n\t\t<dependencies>\r\n\t\t        <dependency>\r\n\t\t                <groupId>com.github.haoch</groupId>\r\n\t\t                <artifactId>flink-siddhi_2.10</artifactId>\r\n\t\t                <version>1.2-SNAPSHOT</version>\r\n\t\t        </dependency>\r\n\t\t</dependencies>\r\n\r\n\t\t<repositories>\r\n\t\t        <repository>\r\n\t\t                <id>clojars</id>\r\n\t\t                <url>http://clojars.org/repo/</url>\r\n\t\t        </repository>\r\n\t\t</repositories>\r\n \r\n* Execute [`SiddhiQL`](https://docs.wso2.com/display/CEP300/Introduction+to+Siddhi+Query+Language) with `SiddhiCEP` API, for example:\r\n\r\n\t     StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\r\n\t     SiddhiCEP cep = SiddhiCEP.getSiddhiEnvironment(env);\r\n\t    \r\n\t     cep.registerExtension(\"custom:plus\",CustomPlusFunctionExtension.class);\r\n\t    \r\n\t     cep.registerStream(\"inputStream1\", input1, \"id\", \"name\", \"price\",\"timestamp\");\r\n\t     cep.registerStream(\"inputStream2\", input2, \"id\", \"name\", \"price\",\"timestamp\");\r\n\t    \r\n\t     DataStream<Tuple5<Integer,String,Integer,String,Double>> output = cep\r\n\t     \t.from(\"inputStream1\").union(\"inputStream2\")\r\n\t     \t.cql( \r\n\t     \t\"from every s1 = inputStream1[id == 2] \"\r\n    \t\t + \" -> s2 = inputStream2[id == 3] \"\r\n    \t\t + \"select s1.id as id_1, s1.name as name_1, s2.id as id_2, s2.name as name_2 , custom:plus(s1.price,s2.price) as price\"\r\n    \t\t + \"insert into outputStream\")\r\n\t    \t.returns(\"outputStream\");\r\n\t    \r\n\t     env.execute();\r\n     \r\n  > For more examples, please see [`org.apache.flink.contrib.siddhi.SiddhiCEPITCase`](https://github.com/haoch/flink-siddhi/blob/master/src/test/java/org/apache/flink/contrib/siddhi/SiddhiCEPITCase.java)\r\n  \r\n## Features\r\n\r\n* Integrate Siddhi CEP as an stream operator (i.e. `TupleStreamSiddhiOperator`), supporting rich CEP features like\r\n  * Filter\r\n  * Join\r\n  * Aggregation\r\n  * Group by\r\n  * Having\r\n  * Window\r\n  * Conditions and Expressions\r\n  * Pattern processing\r\n  * Sequence processing\r\n  * Event Tables\r\n  * ...\r\n* Provide easy-to-use Siddhi CEP API to integrate Flink DataStream API (See `SiddhiCEP` and `SiddhiStream`)\r\n  * Register Flink DataStream associating native type information with Siddhi Stream Schema, supporting POJO,Tuple, Primitive Type, etc.\r\n  * Connect with single or multiple Flink DataStreams with Siddhi CEP Execution Plan\r\n  * Return output stream as DataStream with type intelligently inferred from Siddhi Stream Schema\r\n* Integrate siddhi runtime state management with Flink state (See `AbstractSiddhiOperator`)\r\n* Support siddhi plugin management to extend CEP functions. (See `SiddhiCEP#registerExtension`)\r\n\r\n## Documentations\r\n* Site: https://haoch.github.io/flink-siddhi/\r\n* Wiki: https://github.com/haoch/flink-siddhi/wiki\r\n* Siddhi Query Language: https://docs.wso2.com/display/CEP300/Introduction+to+Siddhi+Query+Language\r\n* Apache Flink: http://flink.apache.org/\r\n\r\n## Development\r\n\r\n### Prerequisites\r\n* Java (Version: `1.8`)\r\n* Apache Maven\r\n\r\n### Clone\r\n\tgit clone git@github.com:haoch/flink-siddhi.git\r\n\r\n### Building\r\n\r\n   \tmvn clean install -DskipTests\r\n   \r\n### Testing\r\n\r\n   \tmvn clean test\r\n\r\n## Support and Contact\r\n* Issues: https://github.com/haoch/flink-siddhi/issues\r\n* Documents: https://github.com/haoch/flink-siddhi/wiki\r\n\r\n## Author and Contributors\r\n\r\n* [@haoch](http://github.com/haoch) (hao AT apache DOT org)\r\n\r\n## Contribution\r\n\r\nWelcome to make contribution to code or document by [sending a pull request](https://github.com/haoch/flink-siddhi/pulls), or [reporting issues or bugs](https://github.com/haoch/flink-siddhi/issues).\r\n\r\n## License\r\n\r\nLicensed under the [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0). More details, please refer to [LICENSE](LICENSE) file.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}